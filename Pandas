eventos = pd.read_csv('/content/df_event.csv', sep=';')

eventos.head()

eventos.tail()

help(pd.read_csv)

df = pd.read_json('http://museus.cultura.gov.br/api/event/find?@select=*')

eventos.columns.values #return the names of the columns

###creating a new df
selec = ['id', 'name', 'shortDescription', 'longDescription'] #list of name of the columns
novo_df = df.filter(items=selec)

df.info() #getting detailed info about df

df.dtypes #show the data type pf each column

df.shape #return the numbers of lines and columns

df.size #returns the numbers of lines mmultiplied by the numbers of columns

df.describe() # method will do a quick statistical summary for every numerical column

df.sample(n=8) #Sample method allows you to select values randomly from a Series or DataFrame. It is useful when we want to select a random sample from a distribution.

df['column name'] #acess the column

df['createTimestamp'][0] #Createtimestamp is the name of the column, 0 is the index of the line

df.isnull() #Identifying Missing Values Isnull

df.isna.any() #Isna function returns a dataframe filled with boolean values with true indicating missing values.

df.isnull.sum() #You can calculate the number of missing values in each column by

df.memory_usage() #returns how much memory each column uses in bytes.

df.nsmallest(5, 'column_name') #Let’s see how we’d go about finding the 5 observations with the smallest value

df.nlargest(5, 'column_name') #Let’s see how we’d go about finding the 5 observations with the largest value

df[0:4] #returns 4 rows

df[['columns', 'i_want', 'to_see']].groupby(['columns_name', 'column_2']).mean() #It makes it easier to unveil the underlying relationships among variables.

novo_df['createTimestamp'] = [i['date'].split(' ')[0] for i in novo_df.createTimestamp] #getting the only date

df.sort_index(by='column_name', ascending=True) #Sorting columns

drop_cols = ['columns', 'collumns2']
df.drop(drop_cols, axis=1, inplace=True)#  is used to remove a row or a column from a dataframe which has a NaN or no values in it.

df.query('2000 < column_name < 4000')[:8]

novo_df['createTimestamp'] = pd.to_datetime(novo_df['createTimestamp']) #alter the type of the column

df.column_name.unique() #select distinct

df.column_name.replace('São José de todos os esportes', 'São José', inplace=True) #Replace the row value, inplace makes persistent in change.
