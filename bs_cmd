comandos e ações em sequência

pip install django

pip install django-crispy-forms

pip install pillow

django-admin startproject bsaas_1 .

python manage.py startapp loja

python manage.py startapp pedido

python manage.py startapp perfil

python manage.py check

python manage.py migrate

python manage.py create superuser

pedro
pedrocanizela@gmail.com
123

python manage.py runserver

entrar no admin: depois de clicar no link para entrar na pagina do servidor, ao final da url adicionar /admin

logar para testar

pip install pylint

Em settings.py podemos mudar a linguagem caso quisermos, e arrumar o fuso horário para 'America/Sao_Paulo'

ainda em settings.py, abaixo de STATIC_URL adicionar:
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATICFILES_DIRS = [
    os.path.join('templates/static')
]

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
from django.contrib.messages import constants
embaixo daqui copiar o conteúdo do arquivo messages zipado
abaixo daqui, colar o conteúdo de sessions, que está abaixo
# Sessão em dias: 60s * 60m * 24h * 1d
SESSION_COOKIE_AGE = 60 * 60 * 24 * 7

# Salvar a cada requisição
SESSION_SAVE_EVERY_REQUEST = False

# Serializer - Padrão JSON
# SESSION_SERIALIZER = 'django.contrib.sessions.serializers.PickleSerializer'

# Para sessions em arquivos ao invés da base de dados
# SESSION_ENGINE = "django.contrib.sessions.backends.file"
# SESSION_FILE_PATH = '/home/luizotavio/Desktop/temp'

Seguir o passo a passo da documentação do debug toolbar para adicionar o debug toolbar:
https://django-debug-toolbar.readthedocs.io/en/latest/installation.html

dentro da pasta loja, no arquivo urls, após o path, importar o include
dentro da pasta loja, no arquivo urls: from django.conf import settings
dentro da pasta loja, no arquivo urls: from django.conf.urls.static import static
dentro da pasta loja, no arquivo urls: á frente de url_patterns, depois de fechar os colchetes, inserir: 
+ static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

dentro do arquivo settings.py, em templates, em dirs, add dentro dos colchetes:
os.path.join(BASE_DIR, 'templates')

dentro da pasta raíz do projeto, no caso bitsaas_version1, criar uma pasta com nome 'templates' e dentro dela criar uma pasta chamada 'static'

python manage.py startapp produto

dentro da pasta rais, bitsaas, criar o seguinte path para salvar as imagens
'produto_imagens/ano/mes'

Dentro da app Produto, dentro de models.py, criar um modelo de produto:
class Produto(models.Model):
    nome = models.CharField(max_length=255)
    descricao_curta = models.TextField(max_length=255)
    descricao_longa = models.TextField()
    imagem = models.ImageField(
        upload_to='produto_imagens/ano/mes', blank=True, null=True)
    slug = models.SlugField(unique=True)
    preco = models.FloatField()
    tipo = models.CharField(
        default='V',
        max_lenght=100,
        choices=(
            ('V', 'Variação'),
            ('S', 'Simples'),
        )
    )

dentro de settings.py adicionar a app produto dentro de installed_apps

python manage.py makemigrations #para criar o banco de dados
python manage.py migrate 

dentro da aplicação produto, no arquivo admin.py:
from . import models
admin.site.register(models.Produto) #Para registrar o Produto que está dentro de models

dentro do app produto, em models.py, adicionar:
def __str__(self):
    return self.nome #Fazendo isso, na pagina admin, na aba de produtos, veremos o nome do produto cadastrado
    
  Dentro do arquivo admin.py em produtos, criar a classe que herda de admin.ModelAdmin para formatar o admin da forma como quero.
  
  class Formatacao_produtos(admin.ModelAdmin):
    list_display = ('nome', 'descricao_curta')
    list_per_page = 10

admin.site.register(models.Produto, Formatacao_produtos)

Criando os models da aplicação pedido:
from django.contrib.auth.models import User

class Pedido(models.Model):
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)
    total = models.FloatField()
    status = models.CharField(
        default="C",
        max_length=1,
        choices=(
            ('A', 'Aprovado'),
            ('C', 'Criado'),
            ('R', 'Reprovado'),
            ('P', 'Pendente'),
            ('E', 'Enviado'),
            ('F', 'Finalizado'),
        )
    )

    def __str__(self):
        return f'Pedido N. {self.pk}'


class ItemPedido(models.Model):
    pedido = models.ForeignKey(Pedido, on_delete=models.CASCADE)
    produto = models.CharField(max_length=255)
    produto_id = models.PositiveIntegerField()
    variacao = models.CharField(max_length=255)
    cariacao_id = models.PositiveIntegerField()
    preco = models.FloatField()
    preco_promocional = models.FloatField(default=0)
    quantidade = models.PositiveIntegerField()
    imagem = models.CharField(max_length=2000)

    def __str__(self):
        return f'Item {self.pedido}'

    class Meta:
        verbose_name = 'Item do pedido'
        verbose_name_plural = 'Itens do pedido'

ir em settings.py e registar a app pedido em apps.
ir em admin.py da app pedido e registrar os models e criar as classe para relacionar item do pedido com pedido

from . import models
class ItemPedidoInline(admin.TabularInline):
    model = models.ItemPedido
    extra = 1


class PedidoAdmin(admin.ModelAdmin):
    inlines = [
        ItemPedidoInline
        ]


admin.site.register(models.Pedido, PedidoAdmin)
admin.site.register(models.ItemPedido)

criando models de perfil

from django.contrib.auth.models import User


class Perfil(models.Model):
    usuario = models.OneToOneField(User, on_delete=models.CASCADE)
    idade = models.PositiveIntegerField()
    data_nascimento = models.DateField()
    cpf = models.CharField(max_length=11)
    endereco = models.CharField(max_length=50)
    numero = models.CharField(max_length=5)
    complemento = models.CharField(max_length=30)
    bairro = models.CharField(max_length=30)
    cep = models.CharField(max_length=8)
    cidade = models.CharField(max_length=30)
    estado = models.CharField(
        max_lenght=2,
        default='SP',
        choices=(
            ('AC', 'Acre'),
            ('AL', 'Alagoas'),
            ('AP', 'Amapá'),
            ('AM', 'Amazonas'),
            ('BA', 'Bahia'),
            ('CE', 'Ceará'),
            ('DF', 'Distrito Federal'),
            ('ES', 'Espírito Santo'),
            ('GO', 'Goiás'),
            ('MA', 'Maranhão'),
            ('MT', 'Mato Grosso'),
            ('MS', 'Mato Grosso do Sul'),
            ('MG', 'Minas Gerais'),
            ('PA', 'Pará'),
            ('PB', 'Paraíba'),
            ('PR', 'Paraná'),
            ('PE', 'Pernambuco'),
            ('PI', 'Piauí'),
            ('RJ', 'Rio de Janeiro'),
            ('RN', 'Rio Grande do Norte'),
            ('RS', 'Rio Grande do Sul'),
            ('RO', 'Rondônia'),
            ('RR', 'Roraima'),
            ('SC', 'Santa Catarina'),
            ('SP', 'São Paulo'),
            ('SE', 'Sergipe'),
            ('TO', 'Tocantins'),
        )
    )

    def __str__(self):
        return f'{self.usuario.first_name} {self.usuario.last_name}'

    def clean(self):
        pass

    class Meta:
        verbose_name = 'Perfil'
        verbose_name_plural = 'Perfis'
        
 ir em settings.py e registrar a app perfil
 
ir em admin.py dentro de perfil e registar o model
from . import models
admin.site.register(models.Perfil)

python manage.py makemigration
python manage.py migrate

Como criar avisos sobre erros:
a nível do models, vá até o model que desej adicionar um erro
from django.forms import ValidationError
dentro da classe que está criando o models, deve exister a segunte função:

def clean(self):
    raise ValidationError({
    'idade' : 'blablabla'
    })
     ####Dentro do raise você passa jum dicioário com o campo que deseja, e qual mensagem você deseja que apareça, no caso aqui, o campo é idade e a mensagem é blablabla

adicionar o validador de cpf dentro do código,
copiar o script para dentro da pasta utils
dentro do models.py na app perfil
import re
from utils.validacpf import valida_cpf

dentro da classe do models que possui o cpf que desejo validar
adiciono:
def clean(self):
    error_messages = {}
    
    if not valida_cpf(self.cpf):
    error_messages['cpf'] = 'Digite um CPF válido'

além disso posso melhorar essa classe clean implementando a função com validador de cep, ela ficaria da seguinte forma:

 def clean(self):
        error_messages = {}

        if not valida_cpf(self.cpf) or len(self.cep) < 8:
            error_messages['cpf'] = 'Digite um CPF válido'

        if re.search(r'[^0-9]', self.cep):
            error_messages['cep'] = 'CEP inválido'

        if error_messages:
            raise ValidationError(error_messages)
            
  ############################CONFERIR O ARQUIVO MODELS.PY DA APP PERFIL PARA VER SE FICOU COMO ESTÁ ABAIXO
  
  from django.db import models
from django.contrib.auth.models import User
from django.forms import ValidationError
import re
from utils.validacpf import valida_cpf


class Perfil(models.Model):
    usuario = models.OneToOneField(User, on_delete=models.CASCADE)
    idade = models.PositiveIntegerField()
    data_nascimento = models.DateField()
    cpf = models.CharField(max_length=11)
    endereco = models.CharField(max_length=50)
    numero = models.CharField(max_length=5)
    complemento = models.CharField(max_length=30)
    bairro = models.CharField(max_length=30)
    cep = models.CharField(max_length=8)
    cidade = models.CharField(max_length=30)
    estado = models.CharField(
        max_length=30,
        default='SP',
        choices=(
            ('AC', 'Acre'),
            ('AL', 'Alagoas'),
            ('AP', 'Amapá'),
            ('AM', 'Amazonas'),
            ('BA', 'Bahia'),
            ('CE', 'Ceará'),
            ('DF', 'Distrito Federal'),
            ('ES', 'Espírito Santo'),
            ('GO', 'Goiás'),
            ('MA', 'Maranhão'),
            ('MT', 'Mato Grosso'),
            ('MS', 'Mato Grosso do Sul'),
            ('MG', 'Minas Gerais'),
            ('PA', 'Pará'),
            ('PB', 'Paraíba'),
            ('PR', 'Paraná'),
            ('PE', 'Pernambuco'),
            ('PI', 'Piauí'),
            ('RJ', 'Rio de Janeiro'),
            ('RN', 'Rio Grande do Norte'),
            ('RS', 'Rio Grande do Sul'),
            ('RO', 'Rondônia'),
            ('RR', 'Roraima'),
            ('SC', 'Santa Catarina'),
            ('SP', 'São Paulo'),
            ('SE', 'Sergipe'),
            ('TO', 'Tocantins'),
        )
    )

    def __str__(self):
        return f'{self.usuario.first_name} {self.usuario.last_name}'

    def clean(self):
        error_messages = {}

        if not valida_cpf(self.cpf) or len(self.cep) < 8:
            error_messages['cpf'] = 'Digite um CPF válido'

        if re.search(r'[^0-9]', self.cep):
            error_messages['cep'] = 'CEP inválido'

        if error_messages:
            raise ValidationError(error_messages)

    class Meta:
        verbose_name = 'Perfil'
        verbose_name_plural = 'Perfis'


###é posspivel utilizar o sluguify para não precisar add os slugs na mão


Dentro de urls.py da pasta do projeto, que no caso aqui é bsaas, adidionar os paths para as urls próprias de cada aplicação.

path('', include('produto.urls')),
path('perfil/', include('perfil.urls')),
path('pedido/', include('pedido.urls')),

Dentro da app produtos, criar um aquivo urls.py
dentro de urls.py inserir
from django.urls import path #Para esse arquivo importar a função path do arquivo de url do projeto
from . import views
criar uma variável chamada app_name,
app_name = 'produto'
urlpatterns = [
    path('', views.ListaProdutos.as_view(), name="lista"),
    path('<slug>', views.DatelheProduto.as_view(), name="detalhe"),
    path('adicionaraocarrinho/', views.AdicionarAoCarrinho.as_view(),
         name="adcionaraocarrinho"),
    path('removerdocarrinho/', views.RemoverDoCarrinho.as_view(),
         name="removerdocarrinho"),
    path('carrinho/', views.Carrinho.as_view(),
         name="carrinho"),
    path('finalizar/', views.Finalizar.as_view(),
         name="finalizar"),

]



Dentro da app perfil, criar um aquivo urls.py
dentro de urls.py inserir
from django.urls import path #Para esse arquivo importar a função path do arquivo de url do projeto
from . import views

Dentro da app pedido, criar um aquivo urls.py
dentro de urls.py inserir
from django.urls import path #Para esse arquivo importar a função path do arquivo de url do projeto
from . import views


dentro da app produto, no arquivo viwes.py:
from django.views.generic.list import ListView
from django.views import View

class ListaProdutos(ListView):
    pass































